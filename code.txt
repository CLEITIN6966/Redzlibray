--[[
	Modern Roblox UI Library
	Autor: Gerado por IA
	Versão: 1.0

	Funcionalidades:
	- Janela arrastável, minimizável e fechável.
	- Design moderno com cantos arredondados e sombras suaves.
	- Animações fluidas usando TweenService.
	- Componentes: Botão, Slider, Textbox e Dropdown.
	- Estrutura pronta para ser retornada por loadstring.
--]]

-- Serviços do Roblox
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Tabela principal da biblioteca que será retornada
local Library = {}
Library.__index = Library

-- Configurações padrão (pode ser customizado)
local theme = {
	AccentColor = Color3.fromRGB(80, 120, 255),
	BackgroundColor = Color3.fromRGB(45, 45, 45),
	SecondaryColor = Color3.fromRGB(60, 60, 60),
	TextColor = Color3.fromRGB(240, 240, 240),
	Font = Enum.Font.SourceSans
}

-- Função auxiliar para criar elementos com propriedades comuns
local function create(instanceType, properties)
	local inst = Instance.new(instanceType)
	for prop, value in pairs(properties or {}) do
		inst[prop] = value
	end
	return inst
end

-- // Função Principal: CreateWindow
function Library:CreateWindow(options)
	local window = {}
	setmetatable(window, Library)

	-- Opções
	options = options or {}
	local title = options.Title or "Nova Janela"
	local size = options.Size or Vector2.new(500, 350)
	
	-- Variáveis internas
	window.components = {}
	local yPadding = 10
	local lastComponentY = 40 -- Começa abaixo da barra de título

	-- Tela Principal (ScreenGui)
	window.ScreenGui = create("ScreenGui", {
		Name = "LibraryScreenGui",
		ZIndexBehavior = Enum.ZIndexBehavior.Global,
		Parent = game:GetService("CoreGui") -- Usa CoreGui para ficar por cima de tudo
	})

	-- Janela Principal (Frame)
	window.MainFrame = create("Frame", {
		Name = "MainFrame",
		Size = UDim2.fromOffset(size.X, size.Y),
		Position = UDim2.fromOffset((game.Workspace.CurrentCamera.ViewportSize.X - size.X) / 2, (game.Workspace.CurrentCamera.ViewportSize.Y - size.Y) / 2),
		BackgroundColor3 = theme.BackgroundColor,
		BorderSizePixel = 0,
		ClipsDescendants = true,
		Parent = window.ScreenGui
	})
	create("UICorner", { CornerRadius = UDim.new(0, 8), Parent = window.MainFrame })

	-- Sombra (opcional, para um visual mais limpo)
	create("UIShadow", {
		ShadowColor = Color3.new(0,0,0),
		ShadowTransparency = 0.5,
		ShadowSize = 24,
		Parent = window.MainFrame
	})

	-- Barra de Título
	local titleBar = create("Frame", {
		Name = "TitleBar",
		Size = UDim2.new(1, 0, 0, 35),
		BackgroundColor3 = theme.SecondaryColor,
		BorderSizePixel = 0,
		Parent = window.MainFrame
	})
	
	-- Título
	create("TextLabel", {
		Name = "TitleLabel",
		Text = title,
		Font = theme.Font,
		TextSize = 16,
		TextColor3 = theme.TextColor,
		Size = UDim2.new(1, -60, 1, 0), -- Deixa espaço para os botões
		Position = UDim2.fromOffset(10, 0),
		TextXAlignment = Enum.TextXAlignment.Left,
		BackgroundTransparency = 1,
		Parent = titleBar
	})

	-- Botão de Fechar
	local closeButton = create("TextButton", {
		Name = "CloseButton",
		Size = UDim2.fromOffset(20, 20),
		Position = UDim2.new(1, -25, 0.5, -10),
		Text = "X",
		Font = theme.Font,
		TextSize = 14,
		TextColor3 = theme.TextColor,
		BackgroundColor3 = theme.SecondaryColor,
		BorderSizePixel = 0,
		Parent = titleBar
	})
	create("UICorner", { CornerRadius = UDim.new(0, 4), Parent = closeButton })

	-- Botão de Minimizar
	local minimizeButton = create("TextButton", {
		Name = "MinimizeButton",
		Size = UDim2.fromOffset(20, 20),
		Position = UDim2.new(1, -50, 0.5, -10),
		Text = "-",
		Font = theme.Font,
		TextSize = 18,
		TextColor3 = theme.TextColor,
		BackgroundColor3 = theme.SecondaryColor,
		BorderSizePixel = 0,
		Parent = titleBar
	})
	create("UICorner", { CornerRadius = UDim.new(0, 4), Parent = minimizeButton })
	
	-- Estado da janela
	local isMinimized = false
	local originalSize = window.MainFrame.Size

	-- Lógica de arrastar a janela
	local dragging = false
	local dragStart = nil
	local startPos = nil

	titleBar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = window.MainFrame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	titleBar.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			if dragging then
				local delta = input.Position - dragStart
				window.MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
			end
		end
	end)

	-- Lógica de Minimizar
	minimizeButton.MouseButton1Click:Connect(function()
		isMinimized = not isMinimized
		if isMinimized then
			TweenService:Create(window.MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), { Size = UDim2.fromOffset(200, 35) }):Play()
			minimizeButton.Text = "+"
		else
			TweenService:Create(window.MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), { Size = originalSize }):Play()
			minimizeButton.Text = "-"
		end
	end)
	
	-- Lógica de Fechar
	closeButton.MouseButton1Click:Connect(function()
		local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad)
		local tween = TweenService:Create(window.MainFrame, tweenInfo, { Size = UDim2.fromOffset(0, 0), Transparency = 1 })
		tween:Play()
		tween.Completed:Wait()
		window.ScreenGui:Destroy()
	end)

	--- // Métodos para Adicionar Componentes \\ ---
	
	local function addComponent(height, callback)
		local yPos = lastComponentY
		lastComponentY = lastComponentY + height + yPadding
		return callback(yPos)
	end
	
	-- Botão
	function window:AddButton(opts)
		addComponent(25, function(yPos)
			local button = create("TextButton", {
				Name = "Button",
				Text = opts.Text or "Botão",
				Size = UDim2.new(1, -20, 0, 25),
				Position = UDim2.fromOffset(10, yPos),
				BackgroundColor3 = theme.AccentColor,
				TextColor3 = theme.TextColor,
				Font = theme.Font,
				TextSize = 16,
				Parent = window.MainFrame
			})
			create("UICorner", { Parent = button })
			
			button.MouseEnter:Connect(function()
				TweenService:Create(button, TweenInfo.new(0.2), { BackgroundColor3 = theme.AccentColor:Lerp(Color3.new(1,1,1), 0.1) }):Play()
			end)
			button.MouseLeave:Connect(function()
				TweenService:Create(button, TweenInfo.new(0.2), { BackgroundColor3 = theme.AccentColor }):Play()
			end)
			
			button.MouseButton1Click:Connect(function()
				pcall(opts.Callback) -- Chama o callback em pcall para segurança
			end)

			table.insert(window.components, button)
		end)
	end

	-- Slider
	function window:AddSlider(opts)
		local value = opts.Default or opts.Min or 0
		addComponent(35, function(yPos)
			local container = create("Frame", {
				Name = "SliderContainer",
				Size = UDim2.new(1, -20, 0, 35),
				Position = UDim2.fromOffset(10, yPos),
				BackgroundTransparency = 1,
				Parent = window.MainFrame
			})
			
			create("TextLabel", {
				Name = "Label",
				Text = opts.Label or "Slider",
				Size = UDim2.new(1, 0, 0, 15),
				Font = theme.Font,
				TextColor3 = theme.TextColor,
				TextXAlignment = Enum.TextXAlignment.Left,
				BackgroundTransparency = 1,
				Parent = container
			})
			
			local track = create("Frame", {
				Name = "Track",
				Position = UDim2.fromOffset(0, 20),
				Size = UDim2.new(1, 0, 0, 5),
				BackgroundColor3 = theme.SecondaryColor,
				BorderSizePixel = 0,
				Parent = container
			})
			create("UICorner", {Parent = track})

			local fill = create("Frame", {
				Name = "Fill",
				Size = UDim2.new((value - opts.Min) / (opts.Max - opts.Min), 0, 1, 0),
				BackgroundColor3 = theme.AccentColor,
				Parent = track
			})
			create("UICorner", {Parent = fill})
			
			local handle = create("Frame", {
				Name = "Handle",
				Size = UDim2.fromOffset(15, 15),
				Position = UDim2.new(fill.Size.X.Scale, -7.5, 0.5, -7.5),
				BackgroundColor3 = theme.AccentColor:Lerp(Color3.new(1,1,1), 0.2),
				BorderSizePixel = 0,
				Parent = track
			})
			create("UICorner", {Parent = handle})

			local isDragging = false
			local function updateSlider(inputPos)
				local relativeX = inputPos.X - track.AbsolutePosition.X
				local percentage = math.clamp(relativeX / track.AbsoluteSize.X, 0, 1)
				value = opts.Min + (opts.Max - opts.Min) * percentage
				fill.Size = UDim2.new(percentage, 0, 1, 0)
				handle.Position = UDim2.new(percentage, -7.5, 0.5, -7.5)
				pcall(opts.Callback, value)
			end
			
			track.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then isDragging = true; updateSlider(input.Position) end
			end)
			UserInputService.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then isDragging = false end
			end)
			UserInputService.InputChanged:Connect(function(input)
				if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then updateSlider(input.Position) end
			end)
			table.insert(window.components, container)
		end)
	end
	
	-- Textbox
	function window:AddTextbox(opts)
		local textboxInstance
		addComponent(30, function(yPos)
			local textbox = create("TextBox", {
				Name = "Textbox",
				Size = UDim2.new(1, -20, 0, 30),
				Position = UDim2.fromOffset(10, yPos),
				Font = theme.Font,
				Text = "",
				PlaceholderText = opts.PlaceholderText or "Digite algo...",
				PlaceholderColor3 = Color3.fromRGB(150,150,150),
				TextColor3 = theme.TextColor,
				BackgroundColor3 = theme.SecondaryColor,
				ClearTextOnFocus = false,
				Parent = window.MainFrame
			})
			create("UICorner", {Parent = textbox})
			textboxInstance = textbox
			
			textbox.FocusLost:Connect(function(enterPressed)
				if enterPressed then
					pcall(opts.Callback, textbox.Text)
				end
			end)
			table.insert(window.components, textbox)
		end)
		return textboxInstance
	end
	
	-- Dropdown
	function window:AddDropdown(opts)
		local isOpen = false
		local selectedOption = opts.Options[1] or ""
		
		addComponent(25, function(yPos)
			local dropdownFrame = create("Frame", {
				Name = "DropdownFrame",
				Size = UDim2.new(1, -20, 0, 25),
				Position = UDim2.fromOffset(10, yPos),
				BackgroundColor3 = theme.SecondaryColor,
				ClipsDescendants = true,
				Parent = window.MainFrame,
			})
			create("UICorner", {Parent = dropdownFrame})

			local label = create("TextLabel", {
				Text = opts.Label or "Dropdown",
				Parent = dropdownFrame,
				BackgroundTransparency = 1,
				Size = UDim2.new(1, -30, 1, 0),
				Position = UDim2.fromOffset(10,0),
				Font = theme.Font,
				TextColor3 = theme.TextColor,
				TextXAlignment = Enum.TextXAlignment.Left,
			})

			local arrow = create("TextLabel", {
				Text = "▼",
				Size = UDim2.fromOffset(20, 20),
				Position = UDim2.new(1, -25, 0.5, -10),
				Parent = dropdownFrame,
				BackgroundTransparency = 1,
				TextColor3 = theme.TextColor
			})

			local optionsList = create("ScrollingFrame", {
				Name = "OptionsList",
				Visible = false,
				Position = UDim2.new(0, 0, 1, 5), -- Posição inicial para animar
				Size = UDim2.new(1, 0, 0, 100), -- Altura da lista
				Parent = dropdownFrame,
				BackgroundColor3 = theme.SecondaryColor,
				BorderSizePixel = 0
			})
			create("UIListLayout", {
				SortOrder = Enum.SortOrder.LayoutOrder,
				Padding = UDim.new(0, 2),
				Parent = optionsList
			})
			
			dropdownFrame.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					isOpen = not isOpen
					optionsList.Visible = true
					local targetSize = isOpen and UDim2.new(1, 0, 0, 100) or UDim2.new(1, 0, 0, 0)
					local targetRotation = isOpen and 180 or 0
					
					TweenService:Create(optionsList, TweenInfo.new(0.3, Enum.EasingStyle.Quad), { Size = targetSize }):Play()
					TweenService:Create(arrow, TweenInfo.new(0.3), {Rotation = targetRotation}):Play()
				end
			end)

			for _, optionText in pairs(opts.Options) do
				local optionButton = create("TextButton", {
					Text = optionText,
					Size = UDim2.new(1, -10, 0, 25),
					Parent = optionsList,
					BackgroundColor3 = theme.SecondaryColor,
					TextColor3 = theme.TextColor,
					Font = theme.Font
				})
				
				optionButton.MouseButton1Click:Connect(function()
					selectedOption = optionText
					label.Text = optionText
					isOpen = false
					TweenService:Create(optionsList, TweenInfo.new(0.3), { Size = UDim2.new(1,0,0,0) }):Play()
					TweenService:Create(arrow, TweenInfo.new(0.3), {Rotation = 0}):Play()
					pcall(opts.Callback, selectedOption)
				end)

				optionButton.MouseEnter:Connect(function() button.BackgroundColor3 = theme.AccentColor end)
				optionButton.MouseLeave:Connect(function() button.BackgroundColor3 = theme.SecondaryColor end)
			end
			table.insert(window.components, dropdownFrame)
		end)
	end

	return window
end

-- Finalmente, retorne a tabela da biblioteca para que possa ser usada pelo loadstring
return Library
